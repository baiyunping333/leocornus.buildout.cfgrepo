<?php

# This file was automatically generated by the MediaWiki installer.
# If you make manual changes, please keep track in case you need to
# recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.
#
# Further documentation for configuration settings may be found at:
# http://www.mediawiki.org/wiki/Manual:Configuration_settings

# If you customize your file layout, set $IP to the directory that contains
# the other MediaWiki files. It will be used as a base to locate files.
if( defined( 'MW_INSTALL_PATH' ) ) {
        $IP = MW_INSTALL_PATH;
} else {
        $IP = dirname( __FILE__ );
}

$path = array( $IP, "$IP/includes", "$IP/languages" );
set_include_path( implode( PATH_SEPARATOR, $path ) . PATH_SEPARATOR . get_include_path() );

# load the default settings.
require_once( "$IP/includes/DefaultSettings.php" );

# If PHP's memory limit is very low, some operations may fail.
#ini_set( 'memory_limit', '128M' );

if ( $wgCommandLineMode ) {
        if ( isset( $_SERVER ) && array_key_exists( 'REQUEST_METHOD', $_SERVER ) ) {
                die( "This script must be run from the command line\n" );
        }
}
## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;

$wgSitename         = "${:wgSitename}";

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL
# /wiki
$wgScriptPath       = "${:wgScriptPath}";
# .php
$wgScriptExtension  = "${:wgScriptExtension}";
# /wiki/$1
$wgArticlePath = "${:wgArticlePath}";
# true
$wgUsePathInfo = ${:wgUsePathInfo};

## UPO means: this is also a user preference option

$wgEnableEmail      = true;
$wgEnableUserEmail  = false; # UPO

$wgEmergencyContact = "${:wgEmergencyContact}";
$wgPasswordSender = "${:wgPasswordSender}";

$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;
$wgEmailConfirmToEdit = true;

## Database settings
$wgDBtype           = "${:wgDBtype}";
$wgDBserver         = "${:wgDBhost}:${:wgDBport}";
$wgDBname           = "${:wgDBname}";
$wgDBuser           = "${:wgDBuser}";
$wgDBpassword       = "${:wgDBpassword}";

# MySQL specific settings
$wgDBprefix         = "${:wgDBprefix}";

# MySQL table options to use during installation or update
$wgDBTableOptions   = "ENGINE=InnoDB, DEFAULT CHARSET=binary";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = true;

## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = array();

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads       = true;
$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

## If you use ImageMagick (or any other shell command) on a
## Linux server, this will need to be set to the name of an
## available UTF-8 locale
$wgShellLocale = "en_US.utf8";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
# $wgHashedUploadDirectory = false;

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;

$wgLocalInterwiki   = $wgSitename;

$wgLanguageCode = "en";

$wgProxyKey = "0047fa1369f5409fafa8b8b77b1be3cb16e423c1e035195328d725fc1d284988";

## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'standard', 'nostalgia', 'cologneblue', 'monobook':
$wgDefaultSkin = '${:wgDefaultSkin}';

## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
# $wgEnableCreativeCommonsRdf = true;
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";
# $wgRightsCode = ""; # Not yet used

$wgDiff3 = "/usr/bin/diff3";

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
$wgCacheEpoch = max( $wgCacheEpoch, gmdate( 'YmdHis', @filemtime( __FILE__ ) ) );

# Address the time difference
$wgLocalTZoffset = date("Z") / 60;

# The following line is supposed to disable account creation
$wgGroupPermissions['*']['createaccount'] = false;

# enable ajax in mediawiki
$wgUseAjax = true;

# tell mediawiki to ignore mimetypes
$wgVerifyMimeType = false;

# set permitted file extensions for upload
$wgFileExtensions = array('bmp', 'doc', 'docx', 'gif', 'ics', 'jpg', 'jpeg', 'pdf', 'png', 'pps', 'ppt', 'pptx', 'svg', 'swf', 'vcs', 'xls', 'zip');

# set default image size on image preview pages to 640x480
$wgDefaultUserOptions['imagesize'] = 1;

# enable File links - see http://www.mediawiki.org/wiki/UNC_links
array_push($wgUrlProtocols, "file://");

# enable file caching
$wgUseFileCache = true; /* default: false */
$wgFileCacheDirectory = "$IP/cache";
$wgShowIPinHeader = false;
$wgDisableCounters = true;

# set maximum upload size for the wiki lower than the PHP absolute max
ini_set( 'post_max_size', '50M' );
ini_set( 'upload_max_filesize', '50M' );
$wgMaxUploadSize = 52428800;

# disable inline errors in SMW
$smwgInlineErrors = false;

#turn on wiki maintenance mode
#$wgReadOnly = "The wiki is in MAINTENANCE MODE - you will be unable to edit wiki pages for a short time - Our apologies for the inconvenience." ;

# set external link target.
$wgExternalLinkTarget = '_blank';

# set wgLogo path.
#$wgLogo = 'images/logo.png';
$wgNamespacesWithSubpages[NS_PROJECT] = true;

############
# MediaWiki Extenstions
# Here a some popular MediaWiki extensions,
# uncomment when you need.
############

#require_once("$IP/extensions/Renameuser/SpecialRenameuser.php");

# enable the inputbox extension
#require_once($IP.'/extensions/InputBox/InputBox.php');
#
## enable ParserFunctions extension
#require_once( "$IP/extensions/ParserFunctions/ParserFunctions.php" );
#
## enable StringFunctions Extension
#require_once("$IP/extensions/StringFunctions/StringFunctions.php");
#
## enable CategoryWatch Extension - see http://www.mediawiki.org/wiki/Extension:CategoryWatch
#require_once("$IP/extensions/CategoryWatch/CategoryWatch.php");
#
## enable the FCKeditor in the wiki
#require_once( "extensions/FCKeditor/FCKeditor.php" );
##require_once("$IP/extensions/FCKeditor/FCKeditor.php");
#
##Enable Wordpress login integration
#require_once('extensions/AuthWP.php');
#$wgAuth=new AuthWP();
#
## enable the category: tree extension
#require_once("{$IP}/extensions/CategoryTree/CategoryTree.php");
## enable the Cite extension
#require_once('extensions/Cite/Cite.php');
## enable the special:cite page, enable "cite this page" link
#require_once('extensions/Cite/SpecialCite.php');
## enable WikiArticleFeeds extension
#require_once('extensions/WikiArticleFeeds.php');
## enable google charts extension for mediawiki
#require_once('extensions/gchart4mw.php');
#
## enable wikicategorytagclouds
#require_once("$IP/extensions/WikiCategoryTagCloud/WikiCategoryTagCloud.php"); // Wiki Category Tag Cloud extension
#
## enable sytaxhighlight extension
#require_once("$IP/extensions/SyntaxHighlight_GeSHi/SyntaxHighlight_GeSHi.php");
#
## enable Semantic Mediawiki
#include_once("$IP/extensions/SemanticMediaWiki/SemanticMediaWiki.php");
##enableSemantics('my.sites.com');
## enable Semantic Forms
#include_once("$IP/extensions/SemanticForms/includes/SF_Settings.php");
## enable cacheing of Semantic Form defintions
#$sfgCacheFormDefinitions = true;
#
## enable RSS mediawiki extension - displays an RSS feed on a MW page
#require_once("$IP/extensions/RSS/RSS.php");
#
## enable new magic word - No Cache
#require_once( "$IP/extensions/MagicNoCache.php" );
#
## enable Google Analytics tracking extension
#require_once( "$IP/extensions/googleAnalytics/googleAnalytics.php" );
